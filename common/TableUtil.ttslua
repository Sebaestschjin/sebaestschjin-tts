local GeTableUtils = require("ge_tts/TableUtils")

local TableUtil = {}

--- Variant of pairs that also works for nil values.
---@generic K, V
---@param tab table<K, V>|nil
---@return fun(tbl: table<K, V>):K, V
function TableUtil.pairs(tab)
  if tab then
    return pairs(--[[---@not nil]]tab)
  end
  return pairs(--[[---@type table<K,V>]]{})
end

---@generic K, V
---@param tab table<K, V>
---@return K[]
function TableUtil.keys(tab)
  local keys = {}
  for key, _ in TableUtil.pairs(tab) do
    table.insert(keys, key)
  end
  return keys
end

--- Checks whether a table is empty. A nil value is also considered an empty table.
---@param tab table|nil
---@return boolean
function TableUtil.isEmpty(tab)
  return not tab or not next(--[[---@not nil]]tab)
end

--- Checks whether a table is not empty. A nil value is always considered an empty table.
---@param tab table|nil
---@return boolean
function TableUtil.isNotEmpty(tab)
  return not TableUtil.isEmpty(tab)
end

---@generic K, V
---@param tab table<K,V>
---@param value V
---@return boolean
function TableUtil.contains(tab, value)
  for _, v in pairs(tab) do
    if v == value then
      return true
    end
  end
  return false
end

---@generic V
---@param tab V[]
function TableUtil.shuffle(tab)
  for i = #tab, 2, -1 do
    local j = math.random(1, i)
    tab[i], tab[j] = tab[j], tab[i]
  end
end

---@overload fun<V>(arr: V[], func: fun(value: V, index: number): boolean): V[]
---@generic K, V
---@param tab table<K, V>
---@param func fun(value: V, key: K): any
---@return table<K, V>
function TableUtil.filter(tab, func)
  return GeTableUtils.select(tab, func)
end

---@overload fun<T>(...: T): T
---@vararg table
---@return table
function TableUtil.merge(...)
  return GeTableUtils.merge(...)
end

---@param tab table
---@return table|nil
function TableUtil.emptyToNil(tab)
  if TableUtil.isEmpty(tab) then
    return nil
  end
  return tab
end

---@generic K, V
---@param tab table<K,V>
---@param key K
---@return V
function TableUtil.removeKey(tab, key)
  local element = tab[key]
  tab[key] = nil
  return element
end

---@generic K, V
---@param tab table<K,V>[]
---@param attributeName K
function TableUtil.sortByAttribute(tab, attributeName)
  return table.sort(tab, function(l, r)
                            return l[attributeName] < r[attributeName]
                         end)
end

---@generic K
---@param set table<K,boolean>
---@return K[]
function TableUtil.setToList(set)
  ---@type K[]
  list = {}
  for entry, value in pairs(set) do
    if value then
      table.insert(list, entry)
    end
  end

  return list
end

return TableUtil
