local TableUtil = require("sebaestschjin-tts.TableUtil")

local StringUtil = {}


---@overload fun(input: string, pattern: string): string
---@param input string
---@param pattern string
---@param replacement string
---@return string
function StringUtil.replace(input, pattern, replacement)
    local r, _ = input:gsub(pattern, replacement or "")
    return r
end

---@param text string
---@param separators string[]
---@return string[]
function StringUtil.split(text, separators)
    if not text then
        return {}
    end
    if TableUtil.isEmpty(separators) then
        return { text }
    end

    local parts = {}
    local seperatorExpression = "[^" .. table.concat(separators, "") .. "]+"
    for part in string.gmatch(text, seperatorExpression) do
        table.insert(parts, part)
    end
    return parts
end

function StringUtil.escapePattern(text)
    return text:gsub("([-+()%[%]])", "%%%1")
end

---@param text string
---@return number[]
function StringUtil.bytes(text)
    local bytes = --[[---@type number[] ]]{}

    for i = 1, #text do
        table.insert(bytes, text:byte(i))
    end

    return bytes
end

function StringUtil.chars(bytes)
    local text = ""

    for _, byte in pairs(bytes) do
        text = text .. string.char(byte)
    end

    return text
end

function StringUtil.isGuid(text)
    return type(text) == "string"
            and text:find("^[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]$")
end

function StringUtil.isBase64(text)
    return text:find("^[a-zA-Z0-9+/]+=?=?$")
end

---@param value string
---@param others string[]
---@param maxDistance number
---@return nil | string
function StringUtil.findNearest(value, others, maxDistance)
    local minDistance, otherValue

    for _, other in pairs(others) do
        local distance = StringUtil.distance(value, other)
        if not minDistance or minDistance > distance then
            minDistance = distance
            otherValue = other
        end
    end

    if minDistance and minDistance > maxDistance then
        return nil
    end
    return otherValue
end

---@param first string
---@param second string
---@return number
function StringUtil.distance(first, second)
    local firstLength, secondLength = #first, #second

    if firstLength == 0 then return secondLength end
    if secondLength == 0 then return firstLength end
    if first == second then return 0 end

    local firstBytes = StringUtil.bytes(first)
    local secondBytes = StringUtil.bytes(second)

    local matrix = --[[---@type number[][] ]]{}
    for i = 0, firstLength do
        matrix[i] = { [0] = i }
    end
    for j = 0, secondLength do
        matrix[0][j] = j
    end

    for i = 1, firstLength do
        for j = 1, secondLength do
            if firstBytes[i] == secondBytes[j] then
                matrix[i][j] = matrix[i - 1][j - 1]
            else
                matrix[i][j] = math.min(matrix[i - 1][j] + 1,
                        matrix[i][j - 1] + 1,
                        matrix[i - 1][j - 1] + 1)
            end
        end
    end

    return matrix[firstLength][secondLength]
end

return StringUtil
