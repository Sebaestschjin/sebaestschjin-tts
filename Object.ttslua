local GeObject = require("ge_tts.Object")

local Object = {}

---@type table<string, string>
Object.Name = --[[---@type table<string, string>]] GeObject.Name
Object.Name.LayoutZone = "LayoutZone"
Object.Name.ModelBag = "Custom_Model_Bag"
Object.Name.ModelInfinite = "Custom_Model_Infinite_Bag"

Object.Type = GeObject.Tag
Object.ModelType = GeObject.ModelType
Object.MaterialType = GeObject.MaterialType

--- Types for custom tiles.
---@type table<string, tts__TileType>
Object.TileType = {
    Box = 0,
    Hex = 1,
    Circle = 2,
    Rounded = 3,
}

Object.LayoutZone = {
    ---@type table<string, tts__LayoutZone_Direction>
    Direction = {
        RightDown = 0,
        DownRight = 1,
        LeftDown = 2,
        DownLeft = 3,
        RightUp = 4,
        UpRight = 5,
        LeftUp = 6,
        UpLeft = 7,
    },
    ---@type table<string, tts__LayoutZone_Facing>
    Facing = {
        DoNotChange = 0,
        FaceUp = 1,
        FaceDown = 2,
        GroupIsTipped = 3,
    },
    ---@type table<string, tts__LayoutZone_GroupDirection>
    GroupDirection = {
        Eastward = 0,
        Westward = 1,
        Northward = 2,
        Southward = 3,
    },
    ---@type table<string, tts__LayoutZone_GroupSort>
    GroupSort = {
        None = 0,
        AddedTime = 1,
        Value = 2,
        Name = 3,
        Description = 4,
        GmNotes = 5,
        Memo = 6,
    }
}

---@type table<string, tts__ObjectType>
Object.TypeForName = {
    [Object.Name.Bag] = Object.Type.Bag,
    [Object.Name.Board] = Object.Type.Board,
    [Object.Name.Card] = Object.Type.Card,
    [Object.Name.CardCustom] = Object.Type.Card,
    [Object.Name.Deck] = Object.Type.Deck,
    [Object.Name.DeckCustom] = Object.Type.Deck,
    [Object.Name.Die4] = Object.Type.Die,
    [Object.Name.Die6] = Object.Type.Die,
    [Object.Name.Die6Rounded] = Object.Type.Die,
    [Object.Name.Die8] = Object.Type.Die,
    [Object.Name.Die10] = Object.Type.Die,
    [Object.Name.Die12] = Object.Type.Die,
    [Object.Name.Die20] = Object.Type.Die,
    [Object.Name.DieCustom] = Object.Type.Die,
    [Object.Name.FigurineCardBot] = Object.Type.Figurine,
    [Object.Name.FigurineCustom] = Object.Type.Figurine,
    [Object.Name.FigurineKimiKat] = Object.Type.Figurine,
    [Object.Name.FigurineKnil] = Object.Type.Figurine,
    [Object.Name.FigurineMara] = Object.Type.Figurine,
    [Object.Name.FigurineSirLoin] = Object.Type.Figurine,
    [Object.Name.FigurineZeke] = Object.Type.Figurine,
    [Object.Name.FigurineZomblor] = Object.Type.Figurine,
    [Object.Name.ModelBag] = Object.Type.Bag,
    [Object.Name.ModelInfinite] = Object.Type.Infinite,
    [Object.Name.InfiniteBag] = Object.Type.Infinite,
    [Object.Name.ScriptingTrigger] = Object.Type.Scripting,
    [Object.Name.Tile] = Object.Type.Tile,
}

---@param object seb_Object_Identifiable
---@return boolean
function Object.isObject(object)
    return type(object) == "userdata"
end

---@param object seb_Object_Identifiable
---@return boolean
function Object.isSimple(object)
    return type(object) == "table" and (--[[---@type tts__IndexedSimpleObjectState]] object).name ~= nil
end

---@param object seb_Object
---@return boolean
function Object.isCard(object)
    return Object.type(object) == Object.Type.Card
end

---@param object seb_Object
---@return boolean
function Object.isDeck(object)
    return Object.type(object) == Object.Type.Deck
end

---@param object seb_Object
---@return boolean
function Object.isBag(object)
    return Object.type(object) == Object.Type.Bag
end

---@param object seb_Object
---@return boolean
function Object.isInfiniteBag(object)
    return Object.type(object) == Object.Type.Infinite
end

---@param object seb_Object
---@return boolean
function Object.isFigurine(object)
    return Object.type(object) == Object.Type.Figurine
end

---@param object seb_Object
---@return boolean
function Object.isContainer(object)
    return Object.isDeck(object) or Object.isBag(object) or Object.isInfiniteBag(object)
end

---@param object tts__Object
function Object.isLoaded(object)
    return not object.spawning and not object.loading_custom
end

---@param object seb_Object
---@return tts__ObjectType
function Object.type(object)
    if Object.isObject(object) then
        return (--[[---@type tts__Object]] object).type
    end
    if Object.isSimple(object) then
        return Object.Type.Card
    end
    return Object.TypeForName[(--[[---@type tts__ObjectState]] object).Name]
end

---@param object seb_Object_Identifiable
---@return GUID
function Object.guid(object)
    if Object.isObject(object) then
        return (--[[---@type tts__Object]] object).getGUID()
    end
    if Object.isSimple(object) then
        return (--[[---@type tts__IndexedSimpleObjectState]] object).guid
    end
    return --[[---@not nil]] (--[[---@type tts__ObjectState]] object).GUID
end

---@param object seb_Object_Identifiable
---@return string
function Object.name(object)
    if Object.isObject(object) then
        return (--[[---@type tts__Object]] object).getName()
    end
    if Object.isSimple(object) then
        return (--[[---@type tts__IndexedSimpleObjectState]] object).name
    end
    return --[[---@not nil]] (--[[---@type tts__ObjectState]] object).Nickname
end

---@param object seb_Object_Identifiable
---@return string
function Object.description(object)
    if Object.isObject(object) then
        return (--[[---@type tts__Object]] object).getDescription()
    end
    if Object.isSimple(object) then
        return (--[[---@type tts__IndexedSimpleObjectState]] object).description or ""
    end
    return (--[[---@type tts__ObjectState]] object).Description or ""
end

---@param object seb_Object
---@return tts__ObjectState
function Object.data(object)
    if Object.isObject(object) then
        return (--[[---@type tts__Object]] object).getData()
    end
    return --[[---@type tts__ObjectState]] object
end

---@param object seb_Object
---@return nil | number
function Object.cardIndex(object)
    local cardId = Object.data(object).CardID
    if not cardId then
        return nil
    end

    return tonumber(tostring(cardId):sub(-2, -1))
end

---@param object seb_Object
---@return tts__Vector
function Object.position(object)
    if Object.isObject(object) then
        return (--[[---@type tts__Object]] object).getPosition()
    end
    return Object.transformToPosition(--[[---@not nil]] (--[[---@type tts__ObjectState]] object).Transform)
end

---@param object seb_Object_Container
---@return tts__Object[] | tts__ObjectState[]
function Object.objects(object)
    if Object.isObject(object) then
        if Object.type(object) == Object.Type.Scripting then
            return (--[[---@type tts__ScriptingTrigger]] object).getObjects()
        else
            return (--[[---@type tts__Container]] object).getData().ContainedObjects or {}
        end
    end
    return (--[[---@type tts__ContainerState]] object).ContainedObjects or {}
end

---@param object seb_Object
---@return tts__Object_Decal[]
function Object.decals(object)
    if Object.isObject(object) then
        return (--[[---@type tts__Object]] object).getDecals() or {}
    end

    local decals = --[[---@type tts__Object_Decal[] ]]{}
    local attachedDecals = --[[---@type tts__ObjectState_Decal[] ]] (--[[---@type tts__ObjectState]] object).AttachedDecals or {}
    for _, decal in ipairs(attachedDecals) do
        table.insert(decals, {
            name = decal.CustomDecal.Name,
            url = decal.CustomDecal.ImageURL,
            position = Object.transformToPosition(decal.Transform),
            rotation = Object.transformToPosition(decal.Transform),
            scale = Object.transformToPosition(decal.Transform),
        })
    end
    return decals
end

---@param object seb_Object
---@return tts__Object_Tag[]
function Object.tags(object)
    if Object.isObject(object) then
        return (--[[---@type tts__Object]] object).getTags()
    end
    return (--[[---@type tts__ObjectState]] object).Tags or {}
end

---@param object seb_Object
---@param tag tts__Object_Tag
---@return boolean
function Object.hasTag(object, tag)
    for _, objectTag in ipairs(Object.tags(object)) do
        if objectTag == tag then
            return true
        end
    end
    return false
end

---@param transform tts__ObjectState_Transform
---@return tts__Vector
function Object.transformToPosition(transform)
    return Vector(--[[---@not nil]] transform.posX, --[[---@not nil]] transform.posY, --[[---@not nil]] transform.posZ)
end

---@param transform tts__ObjectState_Transform
---@return tts__Vector
function Object.transformToRotation(transform)
    return Vector(--[[---@not nil]] transform.rotX, --[[---@not nil]] transform.rotY, --[[---@not nil]] transform.rotZ)
end

---@param transform tts__ObjectState_Transform
---@return tts__Vector
function Object.transformToScale(transform)
    return Vector(--[[---@not nil]] transform.scaleX, --[[---@not nil]] transform.scaleY, --[[---@not nil]] transform.scaleZ)
end

---@overload fun(state: tts__ObjectState): void
---@param state tts__ObjectState
---@param callback tts__ObjectCallbackFunction
function Object.respawn(state, callback)
    if state.GUID then
        local obj = getObjectFromGUID(--[[---@not nil]] state.GUID)
        if obj then
            (--[[---@not nil]] obj).destruct()
        end
    end
    spawnObjectData({
        data = state,
        callback_function = callback
    })
end

return Object
