local GeObject = require("ge_tts.Object")

local Object = {}

Object.Type = GeObject.Tag
Object.Name = GeObject.Name

---@type table<string, tts__ObjectType>
Object.TypeForName = {
    [GeObject.Name.Bag] = Object.Type.Bag,
    [GeObject.Name.Board] = Object.Type.Board,
    [GeObject.Name.Card] = Object.Type.Card,
    [GeObject.Name.CardCustom] = Object.Type.Card,
    [GeObject.Name.Deck] = Object.Type.Deck,
    [GeObject.Name.DeckCustom] = Object.Type.Deck,
    [GeObject.Name.Die4] = Object.Type.Die,
    [GeObject.Name.Die6] = Object.Type.Die,
    [GeObject.Name.Die6Rounded] = Object.Type.Die,
    [GeObject.Name.Die8] = Object.Type.Die,
    [GeObject.Name.Die10] = Object.Type.Die,
    [GeObject.Name.Die12] = Object.Type.Die,
    [GeObject.Name.Die20] = Object.Type.Die,
    [GeObject.Name.DieCustom] = Object.Type.Die,
    [GeObject.Name.FigurineCardBot] = Object.Type.Figurine,
    [GeObject.Name.FigurineCustom] = Object.Type.Figurine,
    [GeObject.Name.FigurineKimiKat] = Object.Type.Figurine,
    [GeObject.Name.FigurineKnil] = Object.Type.Figurine,
    [GeObject.Name.FigurineMara] = Object.Type.Figurine,
    [GeObject.Name.FigurineSirLoin] = Object.Type.Figurine,
    [GeObject.Name.FigurineZeke] = Object.Type.Figurine,
    [GeObject.Name.FigurineZomblor] = Object.Type.Figurine,
    [GeObject.Name.InfiniteBag] = Object.Type.Infinite,
    [GeObject.Name.ScriptingTrigger] = Object.Type.Scripting,
    [GeObject.Name.Tile] = Object.Type.Tile,
}

---@param object seb_Object_Identifiable
---@return boolean
local function isObject(object)
    return type(object) == "userdata"
end

---@param object seb_Object_Identifiable
---@return boolean
local function isSimple(object)
    return type(object) == "table" and (--[[---@type tts__IndexedSimpleObjectState]] object).name ~= nil
end

---@param object seb_Object
---@return boolean
function Object.isCard(object)
    return Object.type(object) == Object.Type.Card
end

---@param object seb_Object
---@return boolean
function Object.isDeck(object)
    return Object.type(object) == Object.Type.Deck
end

---@param object seb_Object
---@return boolean
function Object.isBag(object)
    return Object.type(object) == Object.Type.Bag

end
---@param object seb_Object
---@return boolean
function Object.isContainer(object)
    return Object.isDeck(object) or Object.isBag(object)
end

---@param object seb_Object
---@return tts__ObjectType
function Object.type(object)
    if isObject(object) then
        return (--[[---@type tts__Object]] object).type
    end
    if isSimple(object) then
        return Object.Type.Card
    end
    return Object.TypeForName[(--[[---@type tts__ObjectState]] object).Name]
end

---@param object seb_Object_Identifiable
---@return GUID
function Object.guid(object)
    if isObject(object) then
        return (--[[---@type tts__Object]] object).getGUID()
    end
    if isSimple(object) then
        return (--[[---@type tts__IndexedSimpleObjectState]] object).guid
    end
    return --[[---@not nil]] (--[[---@type tts__ObjectState]] object).GUID
end

---@param object seb_Object_Identifiable
---@return string
function Object.name(object)
    if isObject(object) then
        return (--[[---@type tts__Object]] object).getName()
    end
    if isSimple(object) then
        return (--[[---@type tts__IndexedSimpleObjectState]] object).name
    end
    return --[[---@not nil]] (--[[---@type tts__ObjectState]] object).Nickname
end

---@param object seb_Object_Identifiable
---@return string
function Object.description(object)
    if isObject(object) then
        return (--[[---@type tts__Object]] object).getDescription()
    end
    if isSimple(object) then
        return (--[[---@type tts__IndexedSimpleObjectState]] object).description or ""
    end
    return (--[[---@type tts__ObjectState]] object).Description or ""
end

---@param object seb_Object
---@return tts__ObjectState
function Object.data(object)
    if isObject(object) then
        return (--[[---@type tts__Object]] object).getData()
    end
    return --[[---@type tts__ObjectState]] object
end

---@param object seb_Object
---@return tts__VectorShape
function Object.position(object)
    if isObject(object) then
        return (--[[---@type tts__Object]] object).getPosition()
    end
    return Object.transformToPosition(--[[---@not nil]] (--[[---@type tts__ObjectState]] object).Transform)
end

---@param object seb_Object_Container
---@return tts__Object[] | tts__ObjectState[]
function Object.objects(object)
    if isObject(object) then
        if Object.type(object) == Object.Type.Scripting then
            return (--[[---@type tts__ScriptingTrigger]] object).getObjects()
        else
            return (--[[---@type tts__Container]] object).getData().ContainedObjects or {}
        end
    end
    return (--[[---@type tts__ContainerState]] object).ContainedObjects or {}
end

---@param object seb_Object
---@return tts__Object_Decal[]
function Object.decals(object)
    if isObject(object) then
        return (--[[---@type tts__Object]] object).getDecals() or {}
    end

    local decals = --[[---@type tts__Object_Decal[] ]]{}
    local attachedDecals = --[[---@type tts__ObjectState_Decal[] ]] (--[[---@type tts__ObjectState]] object).AttachedDecals or {}
    for _, decal in ipairs(attachedDecals) do
        table.insert(decals, {
            name = decal.CustomDecal.Name,
            url = decal.CustomDecal.ImageURL,
            position = Object.transformToPosition(decal.Transform),
            rotation = Object.transformToPosition(decal.Transform),
            scale = Object.transformToPosition(decal.Transform),
        })
    end
    return decals
end

---@param transform tts__ObjectState_Transform
---@return tts__Vector
function Object.transformToPosition(transform)
    return Vector(--[[---@not nil]] transform.posX, --[[---@not nil]] transform.posY, --[[---@not nil]] transform.posZ)
end

---@param transform tts__ObjectState_Transform
---@return tts__Vector
function Object.transformToRotation(transform)
    return Vector(--[[---@not nil]] transform.rotX, --[[---@not nil]] transform.rotY, --[[---@not nil]] transform.rotZ)
end

---@param transform tts__ObjectState_Transform
---@return tts__Vector
function Object.transformToScale(transform)
    return Vector(--[[---@not nil]] transform.scaleX, --[[---@not nil]] transform.scaleY, --[[---@not nil]] transform.scaleZ)
end

return Object
