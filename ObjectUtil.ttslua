local TableUtil = require("sebaestschjin-tts.src.TableUtil")

--- @alias GUID string

local ObjectUtil = {}

---@shape common__WrappedObject
---@field tag string
---@field getGUID fun(): GUID
---@field getName fun(): string
---@field getDescription fun(): string
---@field getDecals fun(): common__WrappedDecals[]
---@field getData fun(): tts__ObjectState

---@shape common__WrappedDecals
---@field name string
---@field position tts__Vector

---@shape common__WrappedContainedObject : common__WrappedObject
---@field index number
---@field getPosition fun(): tts__Vector

---@alias common__WrappedDeck common__WrappedContainedObject[]

---@param deck tts__Container | common_DeckZone
---@return common__WrappedDeck
function ObjectUtil.getContainedObjects(deck)
  local deckData = --[[---@type tts__ContainerState]] deck.getData()
  return ObjectUtil.getContainedObjectsFromData(deckData)
end

---@param containerState tts__ContainerState
function ObjectUtil.getContainedObjectsFromData(containerState)
  local objects = {}
  for i, object in pairs(containerState.ContainedObjects) do
    local wrappedObject = ObjectUtil.wrapObject(object)
    wrappedObject.index = i - 1
    wrappedObject.getPosition = function() return ObjectUtil.wrapPosition(containerState.Transform) end
    table.insert(objects, wrappedObject)
  end

  return objects
end

---@param objectData tts__ObjectState
---@return common__WrappedObject
function ObjectUtil.wrapObject(objectData)
  local object = --[[---@type common__WrappedObject]] {}

  object.tag = objectData.Name
  object.getGUID = function() return objectData.GUID end
  object.getName = function() return objectData.Nickname end
  object.getDescription = function() return objectData.Description end
  object.getDecals = function() return ObjectUtil.wrapDecals(--[[---@not nil]] objectData.AttachedDecals) end
  object.getData = function() return objectData end

  return object
end

---@param decalsData tts__AttachedDecalsState[]
---@return common__WrappedDecals[]
function ObjectUtil.wrapDecals(decalsData)
  local decals = {}
  for _, decalData in TableUtil.pairs(decalsData) do
    local decal = {}
    decal.name = decalData.CustomDecal.Name
    decal.position = ObjectUtil.wrapPosition(decalData.Transform)
    table.insert(decals, decal)
  end

  return decals
end

---@param transform tts__ObjectState_Transform
---@return tts__Vector
function ObjectUtil.wrapPosition(transform)
  return Vector(transform.posX, transform.posY, transform.posZ)
end

return ObjectUtil
