local TableUtil = require("sebaestschjin-tts.TableUtil")

local ObjectUtil = {}

---@param deck seb_ContainerLike
---@return seb_WrappedContainedObject_old[]
function ObjectUtil.getContainedObjects(deck)
    local deckData = --[[---@type tts__ContainerState]] deck.getData()
    return ObjectUtil.getContainedObjectsFromData(deckData)
end

---@param containerState tts__ContainerState
---@return seb_WrappedContainedObject_old[]
function ObjectUtil.getContainedObjectsFromData(containerState)
    local objects = {}
    for i, object in pairs(containerState.ContainedObjects) do
        local wrappedObject = --[[---@type seb_WrappedContainedObject_old]] ObjectUtil.wrapObject(object)
        wrappedObject.index = i - 1
        wrappedObject.getPosition = function()
            return ObjectUtil.wrapPosition(--[[---@not nil]] containerState.Transform)
        end
        table.insert(objects, wrappedObject)
    end

    return objects
end

---@param objectData tts__ObjectState
---@return seb_WrappedObject_old
function ObjectUtil.wrapObject(objectData)
    local object = --[[---@type seb_WrappedObject_old]] {}

    object.tag = objectData.Name
    object.getGUID = function() return objectData.GUID or "" end
    object.getName = function() return objectData.Nickname or "" end
    object.getDescription = function() return objectData.Description or "" end
    object.getDecals = function() return ObjectUtil.wrapDecals(objectData.AttachedDecals) end
    object.getData = function() return objectData end

    return object
end

---@param decalsData nil | tts__ObjectState_Decal[]
---@return seb_WrappedDecal_old[]
function ObjectUtil.wrapDecals(decalsData)
    local decals = {}
    for _, decalData in TableUtil.pairs(decalsData) do
        local decal = {}
        decal.name = decalData.CustomDecal.Name
        decal.position = ObjectUtil.wrapPosition(decalData.Transform)
        table.insert(decals, decal)
    end

    return decals
end

---@param transform tts__ObjectState_Transform
---@return tts__Vector
function ObjectUtil.wrapPosition(transform)
    return Vector(--[[---@not nil]] transform.posX,
            --[[---@not nil]] transform.posY,
            --[[---@not nil]] transform.posZ)
end

return ObjectUtil
